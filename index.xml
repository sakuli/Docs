<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>/docs/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 12 Mar 2021 13:52:41 +0200</lastBuildDate>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sakuli properties</title>
      <link>/docs/configuring_tests/sakuli-properties/</link>
      <pubDate>Thu, 23 Apr 2020 05:05:50 +0100</pubDate>
      
      <guid>/docs/configuring_tests/sakuli-properties/</guid>
      <description>Sakuli Properties Sakuli evaluates properties in the following descending priority:
 CLI parameter (if available) testsuite.properties file sakuli.properties file Environment variables  This means, e.g. that the property in the testsuite.properties file has priority over a configuration as environment variable.
Environment variables    Environment variable Type: Default Comment/Example     LOG_MODE String: logfile Changes the CLI log output   SAKULI_ENCRYPTION_KEY String Master key for en- and decryption    Project properties    Property Type: Default Comment / Example     testsuite.</description>
    </item>
    
    <item>
      <title>V2.3.0</title>
      <link>/docs/change_notes/2.3.0/</link>
      <pubDate>Tue, 17 Mar 2020 10:28:41 +0100</pubDate>
      
      <guid>/docs/change_notes/2.3.0/</guid>
      <description>V2.3.0 Sakuli V2.3.0 comes with a lot of improvements in performance and stability as well as with a lot of bug fixes and a completely new forwarder integration. Let&amp;rsquo;s have a look at the major changes for this release.
Sakuli Core Besides node 12 support and adjustments in Sakuli click actions, we&amp;rsquo;ve improved CLI output in case of check/test failures and added ways to ensure a stable website before performing any action.</description>
    </item>
    
    <item>
      <title>Icinga2 Forwarder</title>
      <link>/docs/modules/icinga/</link>
      <pubDate>Thu, 12 Sep 2019 14:15:55 +0200</pubDate>
      
      <guid>/docs/modules/icinga/</guid>
      <description>Icinga2 Forwarder npm i @sakuli/forwarder-icinga2 Enable the Icinga2 API All steps required to enable the Icinga2 API are described in the REST API documentation.
Create a Icinga2 service Create a check_command which will only be executed if Icinga2 did not receive a Sakuli result within a certain time. This ensures that you get a notification even if no passive check result reaches Icinga2 at all:
/etc/icinga2/conf.d/commands.conf object CheckCommand &amp;#34;check_dummy&amp;#34; { import &amp;#34;plugin-check-command&amp;#34; command = [ PluginDir + &amp;#34;/check_dummy&amp;#34;,&amp;#34;$dummy_state$&amp;#34;,&amp;#34;$dummy_text$&amp;#34; ] vars.</description>
    </item>
    
    <item>
      <title>Prerequisites</title>
      <link>/docs/getting-started/prerequisites/</link>
      <pubDate>Tue, 10 Sep 2019 15:25:53 +0200</pubDate>
      
      <guid>/docs/getting-started/prerequisites/</guid>
      <description>What you need Sakuli only supports the active LTS release of Node. For information on what version this currently covers see the Node.js Release Schedule.
In order to be able to run Sakuli on your system, we will assume that you have a working node installation.
To install Node on your system, you can either go to the Node website or you can use tools like Node Version Manager utility to manage various Node versions on a per-user basis.</description>
    </item>
    
    <item>
      <title>V2.4.0</title>
      <link>/docs/change_notes/2.4.0/</link>
      <pubDate>Sun, 30 Aug 2020 10:28:41 +0100</pubDate>
      
      <guid>/docs/change_notes/2.4.0/</guid>
      <description>V2.4.0 Sakuli V2.4.0 brings new features but also a lot of improvements and bug fixes for enhanced user experience. Let&amp;rsquo;s have a look at the major changes for this release.
Sakuli Core Besides our brand-new preset autodiscovery a lot of improvements went into this release. Enhanced scroll behaviour, new config options and improvements for native interactions are just some of them. A detailed list of all applied enhancement and fixes can be found in the CHANGELOG.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/docs/configuring_tests/logging/</link>
      <pubDate>Thu, 23 Apr 2020 05:05:50 +0100</pubDate>
      
      <guid>/docs/configuring_tests/logging/</guid>
      <description>Logging Log levels The default log level in Sakuli is Info. This means all log levels starting from Info and below are logged to sakuli.log. You can configure the log level via log.level in your testsuite.properties file, e.g. log.level=DEBUG
There are currently five log levels implemented:
   Log level Description     Trace Highly increased verbosity. Provides deep insights into code execution.   Debug Increased verbosity.</description>
    </item>
    
    <item>
      <title>Prometheus Fowarder</title>
      <link>/docs/modules/prometheus/</link>
      <pubDate>Tue, 10 Mar 2020 17:26:00 +0200</pubDate>
      
      <guid>/docs/modules/prometheus/</guid>
      <description>Prometheus Forwarder Available from version 2.3.0
Add the forwarder manually as follows:
npm i @sakuli/forwarder-prometheus Push gateway It is assumed that a push gateway is available in your monitoring setup. As Sakuli checks are not constantly available like e.g. a Webservice, it is required to use a Prometheus push gateway to provide a scraping endpoint for Prometheus to obtain measurements gathered by Sakuli.
Forwarder configuration Configuration is located in sakuli.properties within the root folder of your project or respectively in testsuite.</description>
    </item>
    
    <item>
      <title>checkmk Fowarder</title>
      <link>/docs/modules/check/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:04 +0200</pubDate>
      
      <guid>/docs/modules/check/</guid>
      <description>checkmk Forwarder Add the forwarder to your project with:
npm i @sakuli/forwarder-checkmk Sakuli Client Configuration It is assumed that the client is already monitored by checkmk and that an agent is installed and running on it.
Spool folder Create a new folder spool in the installation path of the checkmk agent. This is the folder where the results will be written and stored into. Don&amp;rsquo;t forget to grant writing permissions for the folder to the user running Sakuli checks.</description>
    </item>
    
    <item>
      <title>Anatomy</title>
      <link>/docs/writing_tests/anatomy/</link>
      <pubDate>Thu, 12 Sep 2019 13:18:58 +0200</pubDate>
      
      <guid>/docs/writing_tests/anatomy/</guid>
      <description>Anatomy of a Project This guide assumes that you have finished the &amp;ldquo;Getting started&amp;rdquo; tutorial or that you are experienced with Sakuli v1.
 Most of the complexity and conventions are due to the backwards compatibility to v1, which requires a specific folder and file structure for various reasons (the biggest is Sahi). Sakuli offers now various ways to reduce this complexity dramatically. These features will eventually become part of upcoming releases.</description>
    </item>
    
    <item>
      <title>Initialization</title>
      <link>/docs/getting-started/initialization/</link>
      <pubDate>Tue, 10 Sep 2019 15:26:17 +0200</pubDate>
      
      <guid>/docs/getting-started/initialization/</guid>
      <description>Initialize a project This guide will get you started with writing Sakuli tests from scratch. To follow this tutorial, you should create a new NPM project in an empty folder.
For this guide, we will assume that our working directory is /tmp/sakuli_starter on a *nix system, or %Temp%\sakuli_starter on a Windows machine.
To create a new, empty project, first run:
npm init This interactive prompt will ask you for some metadata regarding your project.</description>
    </item>
    
    <item>
      <title>V2.5.0</title>
      <link>/docs/change_notes/2.5.0/</link>
      <pubDate>Fri, 12 Mar 2021 13:52:41 +0200</pubDate>
      
      <guid>/docs/change_notes/2.5.0/</guid>
      <description>V2.5.0 Sakuli Core The new Sakuli Release 2.5.0 has many improvements in its luggage, which both users and developers have longed for. In addition, a completely new option for automation made it into the release! We are talking about the Sakuli OCR module. But everything in the right order! Let&amp;rsquo;s get it started with the improvements on the Sakuli core! A detailed list of all applied enhancement and fixes can be found in the CHANGELOG.</description>
    </item>
    
    <item>
      <title>OMD Forwarder</title>
      <link>/docs/modules/omd/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/modules/omd/</guid>
      <description>OMD / Gearman Forwarder npm i @sakuli/forwarder-gearman Configure OMD Sakuli transmits performance data to a Gearman result queue rather than to OMD directly. For that we require a gearman-enabled monitoring system in an OMD environment.
It takes a few steps to set up the monitoring system in order to process Sakuli&amp;rsquo;s performance data correctly.
Enable and configure mod-gearman Use the Makefile located in OMD_ROOT/share/sakuli/omd/ to configure mod-gearman:
 Enable all services for mod-gearman Set the bind IP and port (default: 0.</description>
    </item>
    
    <item>
      <title>Interact</title>
      <link>/docs/writing_tests/interact/</link>
      <pubDate>Thu, 12 Sep 2019 13:18:18 +0200</pubDate>
      
      <guid>/docs/writing_tests/interact/</guid>
      <description>Interacting with the environment In addition to screenshot-based test actions, Sakuli is capable of utilizing your keyboard, clipboard and environment variables. All these features are incorporated with the ThenableEnvironment interface.
Environment variable To get a environment variable you can use getEnv(key) or getEnvMasked(key). Only difference between these two is the log output. getEnv(key) will also output key unlike getEnvMasked(key). const env = new Environment(); const path = await env.getEnv(&amp;#34;PATH&amp;#34;); const homeDir = await env.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/docs/getting-started/installation/</link>
      <pubDate>Tue, 10 Sep 2019 15:29:27 +0200</pubDate>
      
      <guid>/docs/getting-started/installation/</guid>
      <description>Installation Process The following steps are required to set up Sakuli to work with multiple browsers. Once the initial setup is done, we will dive right into our first test.
WebDriver Installation Sakuli utilizes the WebDriver protocol to remote control browsers during test execution. In addition to the browser itself, you need to install the corresponding WebDriver as well. Several wrapper packages can be found on npmjs.com, which allow the installation of the required binaries via npm.</description>
    </item>
    
    <item>
      <title>Container</title>
      <link>/docs/modules/container/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/modules/container/</guid>
      <description>Pre-configured Container This image is ready to go and ships with already installed:
 Sakuli Icinga2 / checkmk / OMD / Prometheus Forwarder VNC / noVNC Chrome / Firefox (incl. webdriver)  1 Obtaining the Image docker pull taconsol/sakuli:&amp;lt;IMAGE_TAG&amp;gt; Tech previews of Sakuli containers are published as latest. We highly recommend specifying the exact version of Sakuli for productive tests/checks.
Containers are tagged according to Sakuli versions, so in order to use Sakuli v2.</description>
    </item>
    
    <item>
      <title>Screenshot</title>
      <link>/docs/writing_tests/screenshot/</link>
      <pubDate>Thu, 12 Sep 2019 13:18:02 +0200</pubDate>
      
      <guid>/docs/writing_tests/screenshot/</guid>
      <description>Screenshot based Testing A lot of E2E scenarios exceed the capabilities of browsers and webdrivers. This might include common use-cases like a drag and drop from the host system to a webpage or exporting a report into a spreadsheet or PDF-format. In these cases, your web-based tests can be extended to also validate behavior and invoke interactions outside the browser, all within a single test.
Of course, you can also use Sakulis native testing power on its own, e.</description>
    </item>
    
    <item>
      <title>First Setup</title>
      <link>/docs/getting-started/firsttest/</link>
      <pubDate>Tue, 10 Sep 2019 15:30:30 +0200</pubDate>
      
      <guid>/docs/getting-started/firsttest/</guid>
      <description>Setup Setup Your First Test Since v2.2.0 Sakuli provides an easy to use mechanism to initialize testcases and testsuites.
npx sakuli create project . my-sut This will create all necessary files and folders to start writing your first Sakuli test right away. With this, you can skip the next section and directly start to write your first test
Setup the Project Manually Since we wanted to keep Sakuli mostly compatible to v1, the file layout looks basically the same for testsuites.</description>
    </item>
    
    <item>
      <title>Tabs</title>
      <link>/docs/cookbook/tabs/</link>
      <pubDate>Mon, 20 Jul 2020 12:41:40 +0100</pubDate>
      
      <guid>/docs/cookbook/tabs/</guid>
      <description>How can I handle tabs in Sakuli? Switch focus to another tab The simplest way to switch the tab is based on the position of the tab. This snippet, for example, will switch to the second tab of the browser. let handles = await driver.getAllWindowHandles(); await driver.switchTo().window(handles[1]); 
To switch back to the first tab, we can use: await driver.switchTo().window(handles[0]); 
Closing a tab You can close the currently focused tab with: await driver.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/docs/cookbook/logging/</link>
      <pubDate>Thu, 23 Apr 2020 05:05:50 +0100</pubDate>
      
      <guid>/docs/cookbook/logging/</guid>
      <description>Logging Logging is done via the Logger object within a testcase. It provides several methods to log at the respective log level: Logger.logDebug(&amp;#34;This will be logged on debug level&amp;#34;); Logger.logInfo(&amp;#34;This will be logged on info level&amp;#34;); Logger.logWarning(&amp;#34;This will be logged on warning level&amp;#34;); Logger.logError(&amp;#34;This will be logged on error level&amp;#34;);</description>
    </item>
    
    <item>
      <title>Version control systems</title>
      <link>/docs/getting-started/version-control/</link>
      <pubDate>Fri, 03 Apr 2020 09:00:42 +0200</pubDate>
      
      <guid>/docs/getting-started/version-control/</guid>
      <description>Version control systems We highly recommend using version control systems for your test/check files, configs, etc. This ensures that changes are tracked, eases development processes as well as backup strategies and allows to release versions of tests/checks in relation to a certain version of your system under test. During test/check execution, Sakuli creates various files like logs and error screenshots which should be ignored when using version control. Common version control systems support strategies to ignore files and folders.</description>
    </item>
    
    <item>
      <title>Handling forms</title>
      <link>/docs/cookbook/handling-forms/</link>
      <pubDate>Fri, 20 Mar 2020 13:18:11 +0100</pubDate>
      
      <guid>/docs/cookbook/handling-forms/</guid>
      <description>Handling forms Filling forms and verifying their functionality is one of the major use cases in E2E-Testing and -Monitoring. Most of the web elements have been abstracted from their technical specification in HTML. An &amp;lt;intput name=&amp;quot;last-name&amp;quot; /&amp;gt;  for example is abstracted as a _textbox(&amp;quot;last-name&amp;quot;) accessor. Let&amp;rsquo;s have a look at the most common accessors to interact with forms.
Input fields Textarea Filling text into a textarea can easily be achieved by combining the _setValue() action with the _textarea() accessor.</description>
    </item>
    
    <item>
      <title>Waiting</title>
      <link>/docs/cookbook/waiting/</link>
      <pubDate>Thu, 19 Mar 2020 12:05:50 +0100</pubDate>
      
      <guid>/docs/cookbook/waiting/</guid>
      <description>Waiting In some cases, it might be required to wait for an animation to finish or for page to load dynamic content to use it in test cases or checks. To achieve this, Sakuli provides various options to wait a certain time or for a specified condition until test execution continues.
Static wait // wait for three seconds await _wait(3000);  Wait for an element to be visible // wait for three seconds until the DIV &amp;#34;MyDiv&amp;#34; is visible await _wait(3000, () =&amp;gt; _isVisible(_div(&amp;#34;MyDiv&amp;#34;)));  Wait for any condition to be met It is possible to pass a boolean function (function returning true or false) as a second optional parameter of the _wait() action.</description>
    </item>
    
    <item>
      <title>Error: Invalid session id</title>
      <link>/docs/cookbook/invalid-session-id/</link>
      <pubDate>Mon, 03 Feb 2020 15:25:42 +0100</pubDate>
      
      <guid>/docs/cookbook/invalid-session-id/</guid>
      <description>Oh noes! Sakuli crashed with an &amp;ldquo;Invalid session id&amp;rdquo; error! When Sakuli crashes with an &amp;ldquo;Invalid session id&amp;rdquo; error, the webdriver itself crashed or least closed the session the Sakuli test or check is using. Such a behavior mostly occurs, when the provided resources for the Sakuli execution are insufficient. When testing bigger websites, please check if enough SHM space is available.
 Running Sakuli container with &amp;ndash;shm-size Increasing shared memory on openshift  </description>
    </item>
    
    <item>
      <title>Run Container</title>
      <link>/docs/cookbook/container/</link>
      <pubDate>Mon, 16 Dec 2019 18:57:44 +0100</pubDate>
      
      <guid>/docs/cookbook/container/</guid>
      <description>How to run a Container with Sakuli Tests  Sakuli Container are only available with an active Sakuli subscription.
 The following how-to aims to help unexperienced users getting started with Sakuli Containers. A Sakuli Container ships with pre-installed Sakuli, Monitoring forwarder and other additional modules, it is not necessary to install anything on your docker-host, except for docker.
Download the image You first need to download the Sakuli image: docker pull taconsol/sakuli:2.</description>
    </item>
    
    <item>
      <title>Container and Proxies</title>
      <link>/docs/cookbook/proxy/</link>
      <pubDate>Mon, 16 Dec 2019 11:50:07 +0100</pubDate>
      
      <guid>/docs/cookbook/proxy/</guid>
      <description>Container behind Proxies To configure a proxy within your docker container, set one or both of the following environment variables within your docker run command.
-e HTTP_PROXY=http://server-ip:port/ -e HTTPS_PROXY=http(s)://server-ip:port/  Use a HTTP_PROXY for http target sites and HTTPS_PROXY for https sites, if you switch between secure and insecure sites or just to be sure not to worry about it, you can also define both proxies at the same time, e.</description>
    </item>
    
    <item>
      <title>Frames</title>
      <link>/docs/cookbook/frames/</link>
      <pubDate>Fri, 13 Dec 2019 12:41:40 +0100</pubDate>
      
      <guid>/docs/cookbook/frames/</guid>
      <description>How can I handle frames or iframes in Sakuli? Since v2.2.0 Sakuli will automatically detect different frames (and iframes) and will search for elements in each frame when the element can not be found in default frame. But it is also possible to switch between frames manually by using the iframe webelement or its respective index.
const myIframe = await _fetch(_iframe(&amp;#39;frameName&amp;#39;)); await driver.switchTo().frame(myIframe);  const frameIndex = 0; await driver.switchTo().frame(frameIndex);  Please note: Depending on the size and number of used inline frames, an automated search might limit the performance of the check or test case.</description>
    </item>
    
    <item>
      <title>S2I Image</title>
      <link>/docs/modules/s2i/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/modules/s2i/</guid>
      <description>S2I Image Sakuli comes with ready-to-use source to image (S2I) containers for RedHat OpenShift. Using this builder container, it is easily possible to create deployable Sakuli images shipped with a test suite straight from your code repository.
Setup To setup the source to image builds on your OpenShift cluster, it is required to import the images from taconsol/sakuli-s2i.
oc import-image sakuli-s2i \  --from=docker.io/taconsol/sakuli-s2i \  --confirm \  --scheduled=true \  --all=true  Note: The oc import-image statement is configured to not only import all available Sakuli S2I images but also to check for updates automatically.</description>
    </item>
    
    <item>
      <title>Native applications</title>
      <link>/docs/writing_tests/application/</link>
      <pubDate>Thu, 12 Sep 2019 13:18:58 +0200</pubDate>
      
      <guid>/docs/writing_tests/application/</guid>
      <description>Interacting with a native application Now that we have covered how to interact with an operating system and used screenshot based testing capabilities of Sakuli, we can move on how to utilize one or multiple applications. All features are incorporated in the ThenableApplication Interface.
Open an application To open an application, you enter the path to the application or respectively the application name, if you already added it to your PATH environment variable.</description>
    </item>
    
    <item>
      <title>Sakuli Dashboard</title>
      <link>/docs/modules/sakuli-dashboard-deployment/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:46 +0200</pubDate>
      
      <guid>/docs/modules/sakuli-dashboard-deployment/</guid>
      <description>Sakuli Dashboard The Sakuli Dashboard streamlines your e2e application monitoring with Sakuli. It helps you start your Sakuli test automatically with a cronjob to monitor your application continuously or trigger it manually with a button. While watching a live video feed of your Sakuli check, you can track the monitoring metrics of your application by embedding your monitoring graphs into the Sakuli Dashboard.
How to get the Sakuli Dashboard Sakuli Dashboard releases are versioned following the semantic versioning scheme.</description>
    </item>
    
    <item>
      <title>Webtests</title>
      <link>/docs/writing_tests/webtests/</link>
      <pubDate>Thu, 12 Sep 2019 13:16:37 +0200</pubDate>
      
      <guid>/docs/writing_tests/webtests/</guid>
      <description>Web tests For DOM based testing most of the functions from Sahi tests can be used (please note that Sakuli only implements the open source APIs).
The main difference between Sakuli v1 and Sakuli v2 is the usage of Promises in the action API, meaning that you have to await a click for example.
On the other hand, element selectors remain synchronized functions but will not do the actual DOM fetching anymore.</description>
    </item>
    
    <item>
      <title>Tutorial</title>
      <link>/docs/writing_tests/tutorial/</link>
      <pubDate>Thu, 12 Sep 2019 13:16:37 +0200</pubDate>
      
      <guid>/docs/writing_tests/tutorial/</guid>
      <description>Tutorial This tutorial shows how to set up a Sakuli test using the CLI and how to use a combination of the native and DOM-based features of Sakuli.
Setting up a Sakuli Test Suite Sakuli will bootstrap a test suite with the following command. A detailed explanation on what files are needed, can be found in anatomy chapter. npx @sakuli/cli create project . --package npm i
Typescript This step is optional but we recommend using typescript.</description>
    </item>
    
    <item>
      <title>Migration from Sakuli 1</title>
      <link>/docs/writing_tests/migration-sakuli-1/</link>
      <pubDate>Wed, 20 May 2020 08:56:58 +0200</pubDate>
      
      <guid>/docs/writing_tests/migration-sakuli-1/</guid>
      <description>How to Migrate from Sakuli 1 With Sakuli v2+ we changed a lot under the hood and completely replaced the technology-stack. This resulted in a more flexible and future-ready architecture while preserving a maximum of backward compatibility. Nearly all functions and classes from Sakuli v1 are available in Sakuli v2+. They are provided by the @sakuli/legacy package.
Async / Await You might have wondered where the await keyword came from when you saw the Sakuli v2+ code.</description>
    </item>
    
    <item>
      <title>Sakuli Dashboard Configuration</title>
      <link>/docs/modules/sakuli-dashboard-configuration/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:46 +0200</pubDate>
      
      <guid>/docs/modules/sakuli-dashboard-configuration/</guid>
      <description>Sakuli Dashboard Configuration This section contains information on how to configure the Sakuli dashboard.
The Sakuli dashboard is configurable via environmental variables containing JSON documents. Check out the different sections to get example templates and detailed information about how to set up your Sakuli dashboard.
   Environment variable Description     DASHBOARD_CONFIG Configures the displays (ordering, url, action buttons, etc.) shown in the dashboard   ACTION_CONFIG (optional) Available actions to perform on the cluster and corresponding display updates   CLUSTER_CONFIG (optional) Configures the cluster access (cluster address, access token, etc.</description>
    </item>
    
    <item>
      <title>Optical character recognition (OCR)</title>
      <link>/docs/modules/ocr/</link>
      <pubDate>Fri, 18 Dec 2020 13:55:46 +0100</pubDate>
      
      <guid>/docs/modules/ocr/</guid>
      <description>Optical character recognition (OCR) (Available from v2.5.0)
With optical character recognition (OCR) it is possible to convert screen content into text. In combination with Sakuli, it is also possible to automate software based on the text shown on screen.
OCR in containers Sakuli containers ship with a complete setup to use the OCR module of Sakuli. OCR module can be used without any further set up.
Installing Sakuli OCR Installing the OCR module of Sakuli on a workstation or virtual machine is possible, but requires some additional steps and dependencies.</description>
    </item>
    
  </channel>
</rss>