<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>/docs/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 03 Apr 2020 09:00:42 +0200</lastBuildDate>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>V2.3.0</title>
      <link>/docs/change_notes/2.3.0/</link>
      <pubDate>Tue, 17 Mar 2020 10:28:41 +0100</pubDate>
      
      <guid>/docs/change_notes/2.3.0/</guid>
      <description>V2.3.0 Sakuli V2.3.0 comes with a lot of improvements in performance and stability as well as with a lot of bug fixes and a completely new forwarder integration. Let&amp;rsquo;s have a look at the major changes for this release.
Sakuli Core Besides node 12 support and adjustments in Sakuli click actions, we&amp;rsquo;ve improved CLI output in case of check/test failures and added ways to ensure a stable website before performing any action.</description>
    </item>
    
    <item>
      <title>Icinga2 Forwarder</title>
      <link>/docs/enterprise_features/icinga/</link>
      <pubDate>Thu, 12 Sep 2019 14:15:55 +0200</pubDate>
      
      <guid>/docs/enterprise_features/icinga/</guid>
      <description>Icinga2 Forwarder Add the forwarder using the assistant or configure it manually:
npm i @sakuli/forwarder-icinga2 To register the forwarder into your project you have to edit the package.json file and add the preset to the Sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-icinga2&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.</description>
    </item>
    
    <item>
      <title>Prerequisites</title>
      <link>/docs/getting-started/prerequisites/</link>
      <pubDate>Tue, 10 Sep 2019 15:25:53 +0200</pubDate>
      
      <guid>/docs/getting-started/prerequisites/</guid>
      <description>What you need Sakuli is built and tested against the current LTS version of Node.js.
Up to version 2.2.0 Sakuli supports node v10.x (lts/dubnium). Starting with version 2.3.0, Sakuli also supports v12.x (lts/erbium). In order to be able to run Sakuli on your system, we will assume that you have a working node installation.
To install Node on your system, you can either go to the Node websiteor you can use tools like Node Version Managerutility to manage various Node versions on a per-user basis.</description>
    </item>
    
    <item>
      <title>Prometheus Fowarder</title>
      <link>/docs/enterprise_features/prometheus/</link>
      <pubDate>Tue, 10 Mar 2020 17:26:00 +0200</pubDate>
      
      <guid>/docs/enterprise_features/prometheus/</guid>
      <description>Prometheus Forwarder Available from version 2.3.0
Add the forwarder manually as follows:
npm i @sakuli/forwarder-prometheus To register the forwarder in your project, edit your package.json and add the preset to the Sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-prometheus&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.
Push gateway It is assumed that a push gateway is available in your monitoring setup.</description>
    </item>
    
    <item>
      <title>checkmk Fowarder</title>
      <link>/docs/enterprise_features/check/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:04 +0200</pubDate>
      
      <guid>/docs/enterprise_features/check/</guid>
      <description>checkmk Forwarder Add the forwarder using the assistant or configure it manually:
Add the forwarder to your project with:
npm i @sakuli/forwarder-checkmk To register the forwarder into your project you have to edit the package.json file and add the preset to the Sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-checkmk&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.</description>
    </item>
    
    <item>
      <title>Anatomy</title>
      <link>/docs/writing_tests/anatomy/</link>
      <pubDate>Thu, 12 Sep 2019 13:18:58 +0200</pubDate>
      
      <guid>/docs/writing_tests/anatomy/</guid>
      <description>Anatomy of a Project This guide assumes that you have finished the &amp;ldquo;Getting started&amp;rdquo; tutorial or that you are experienced with Sakuli v1.
 Most of the complexity and conventions are due to the backwards compatibility to v1, which requires a specific folder and file structure for various reasons (the biggest is Sahi). Sakuli offers now various ways to reduce this complexity dramatically. These features will eventually become part of upcoming releases.</description>
    </item>
    
    <item>
      <title>Initialization</title>
      <link>/docs/getting-started/initialization/</link>
      <pubDate>Tue, 10 Sep 2019 15:26:17 +0200</pubDate>
      
      <guid>/docs/getting-started/initialization/</guid>
      <description>Initialize a project This guide will get you started with writing Sakuli tests from scratch. To follow this tutorial, you should create a new NPM project in an empty folder.
For this guide, we will assume that our working directory is /tmp/sakuli_starter on a *nix system, or %Temp%\sakuli_starter on a Windows machine.
To create a new, empty project, first run:
npm init This interactive prompt will ask you for some metadata regarding your project.</description>
    </item>
    
    <item>
      <title>OMD Forwarder</title>
      <link>/docs/enterprise_features/omd/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/enterprise_features/omd/</guid>
      <description>OMD / Gearman Forwarder Add the forwarder using the assistant or configure it manually:
npm i @sakuli/forwarder-gearman To register the forwarder into your project you have to edit the package.json file and add the preset to the Sakuli configuration key:
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-gearman&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.</description>
    </item>
    
    <item>
      <title>Interact</title>
      <link>/docs/writing_tests/interact/</link>
      <pubDate>Thu, 12 Sep 2019 13:18:18 +0200</pubDate>
      
      <guid>/docs/writing_tests/interact/</guid>
      <description>Interacting with the environment In addition to screenshot-based test actions, Sakuli is capable of utilizing your keyboard, clipboard and environment variables. All these features are incorporated with the ThenableEnvironmentinterface.
Environment variable To get a environment variable you can use getEnv(key) or getEnvMasked(key). Only difference between these two is the log output. getEnv(key) will also output key unlike getEnvMasked(key). const env = new Environment(); const path = await env.getEnv(&amp;#34;PATH&amp;#34;); const homeDir = await env.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/docs/getting-started/installation/</link>
      <pubDate>Tue, 10 Sep 2019 15:29:27 +0200</pubDate>
      
      <guid>/docs/getting-started/installation/</guid>
      <description>Installation Process The following steps are required to set up Sakuli to work with multiple browsers. Once the initial setup is done, we will dive right into our first test.
WebDriver Installation Sakuli utilizes the WebDriver protocolto remote control browsers during test execution. In addition to the browser itself, you need to install the corresponding WebDriver as well. Several wrapper packages can be found on npmjs.com, which allow the installation of the required binaries via npm.</description>
    </item>
    
    <item>
      <title>Container</title>
      <link>/docs/enterprise_features/e2e/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/enterprise_features/e2e/</guid>
      <description>Pre-configured Container Once you obtained a Sakuli Enterprise license your docker-user will be granted access to the private Sakuli test container image. This image is ready to go and ships with already installed:
 Sakuli Icinga2 / checkmk / OMD / Prometheus Forwarder VNC / noVNC Chrome / Firefox (incl. webdriver)  1 Obtaining the Image The registered docker-hub user will then be able to pull the private image:
docker pull taconsol/sakuli:&amp;lt;IMAGE_TAG&amp;gt; Sakuli test containers do not provide a latest tag.</description>
    </item>
    
    <item>
      <title>Screenshot</title>
      <link>/docs/writing_tests/screenshot/</link>
      <pubDate>Thu, 12 Sep 2019 13:18:02 +0200</pubDate>
      
      <guid>/docs/writing_tests/screenshot/</guid>
      <description>Screenshot based Testing A lot of E2E scenarios exceed the capabilities of browsers and webdrivers. This might include common use-cases like a drag and drop from the host system to a webpage or exporting a report into a spreadsheet or PDF-format. In these cases, your web-based tests can be extended to also validate behavior and invoke interactions outside the browser, all within a single test.
Of course, you can also use Sakulis native testing power on its own, e.</description>
    </item>
    
    <item>
      <title>First Setup</title>
      <link>/docs/getting-started/firsttest/</link>
      <pubDate>Tue, 10 Sep 2019 15:30:30 +0200</pubDate>
      
      <guid>/docs/getting-started/firsttest/</guid>
      <description>Setup Setup Your First Test Since v2.2.0 Sakuli provides an easy to use mechanism to initialize testcases and testsuites.
npx sakuli create project . my-sut This will create all necessary files and folders to start writing your first Sakuli test right away. With this, you can skip the next section and directly start to write your first test
Setup the Project Manually Since we wanted to keep Sakuli mostly compatible to v1, the file layout looks basically the same for testsuites.</description>
    </item>
    
    <item>
      <title>Version control systems</title>
      <link>/docs/getting-started/version-control/</link>
      <pubDate>Fri, 03 Apr 2020 09:00:42 +0200</pubDate>
      
      <guid>/docs/getting-started/version-control/</guid>
      <description>Version control systems We highly recommend using version control systems for your test/check files, configs, etc. This ensures that changes are tracked, eases development processes as well as backup strategies and allows to release versions of tests/checks in relation to a certain version of your system under test. During test/check execution, Sakuli creates various files like logs and error screenshots which should be ignored when using version control. Common version control systems support strategies to ignore files and folders.</description>
    </item>
    
    <item>
      <title>Handling forms</title>
      <link>/docs/cookbook/handling-forms/</link>
      <pubDate>Fri, 20 Mar 2020 13:18:11 +0100</pubDate>
      
      <guid>/docs/cookbook/handling-forms/</guid>
      <description>Handling forms Filling forms and verifying their functionality is one of the major use cases in E2E-Testing and -Monitoring. Most of the web elements have been abstracted from their technical specification in HTML. An &amp;lt;intput name=&amp;quot;last-name&amp;quot; /&amp;gt;  for example is abstracted as a _textbox(&amp;quot;last-name&amp;quot;) accessor. Let&amp;rsquo;s have a look at the most common accessors to interact with forms.
Input fields Textarea Filling text into a textarea can easily be achieved by combining the _setValue() action with the _textarea() accessor.</description>
    </item>
    
    <item>
      <title>Waiting</title>
      <link>/docs/cookbook/waiting/</link>
      <pubDate>Thu, 19 Mar 2020 12:05:50 +0100</pubDate>
      
      <guid>/docs/cookbook/waiting/</guid>
      <description>Waiting In some cases, it might be required to wait for an animation to finish or for page to load dynamic content to use it in test cases or checks. To achieve this, Sakuli provides various options to wait a certain time or for a specified condition until test execution continues.
Static wait // wait for three seconds await _wait(3000);  Wait for an element to be visible // wait for three seconds until the DIV &amp;#34;MyDiv&amp;#34; is visible await _wait(3000, () =&amp;gt; _isVisible(_div(&amp;#34;MyDiv&amp;#34;)));  Wait for any condition to be met It is possible to pass a boolean function (function returning true or false) as a second optional parameter of the _wait() action.</description>
    </item>
    
    <item>
      <title>Error: Invalid session id</title>
      <link>/docs/cookbook/invalid-session-id/</link>
      <pubDate>Mon, 03 Feb 2020 15:25:42 +0100</pubDate>
      
      <guid>/docs/cookbook/invalid-session-id/</guid>
      <description>Oh noes! Sakuli crashed with an &amp;ldquo;Invalid session id&amp;rdquo; error! When Sakuli crashes with an &amp;ldquo;Invalid session id&amp;rdquo; error, the webdriver itself crashed or least closed the session the Sakuli test or check is using. Such a behavior mostly occurs, when the provided resources for the Sakuli execution are insufficient. When testing bigger websites, please check if enough SHM space is available.
 Running Sakuli container with &amp;ndash;shm-size Increasing shared memory on openshift  </description>
    </item>
    
    <item>
      <title>Run Container</title>
      <link>/docs/cookbook/container/</link>
      <pubDate>Mon, 16 Dec 2019 18:57:44 +0100</pubDate>
      
      <guid>/docs/cookbook/container/</guid>
      <description>How to run a Container with Sakuli Tests  Sakuli Container are only available with an active Sakuli subscription.
 The following how-to aims to help unexperienced users getting started with Sakuli Containers. A Sakuli Container ships with pre-installed Sakuli, Monitoring forwarder and other additional features, it is not necessary to install anything on your docker-host, except for docker.
Download the image With your logged-in docker-user (which is authorized to access the repository with an active subscription), you first need to download the Sakuli image: docker pull taconsol/sakuli:2.</description>
    </item>
    
    <item>
      <title>Container and Proxies</title>
      <link>/docs/cookbook/proxy/</link>
      <pubDate>Mon, 16 Dec 2019 11:50:07 +0100</pubDate>
      
      <guid>/docs/cookbook/proxy/</guid>
      <description>Container behind Proxies To configure a proxy within your docker container, set one or both of the following environment variables within your docker run command.
-e HTTP_PROXY=http://server-ip:port/ -e HTTPS_PROXY=http(s)://server-ip:port/  Use a HTTP_PROXY for http target sites and HTTPS_PROXY for https sites, if you switch between secure and insecure sites or just to be sure not to worry about it, you can also define both proxies at the same time, e.</description>
    </item>
    
    <item>
      <title>Frames</title>
      <link>/docs/cookbook/frames/</link>
      <pubDate>Fri, 13 Dec 2019 12:41:40 +0100</pubDate>
      
      <guid>/docs/cookbook/frames/</guid>
      <description>How can I handle frames or iframes in Sakuli? Since v2.2.0 Sakuli will automatically detect different frames (and iframes) and will search for elements in each frame when the element can not be found in default frame. But it is also possible to switch between frames manually by using the iframe webelement or its respective index.
const myIframe = await _fetch(_iframe(&amp;#39;frameName&amp;#39;)); await driver.switchTo().frame(myIframe);  const frameIndex = 0; await driver.switchTo().frame(frameIndex);  </description>
    </item>
    
    <item>
      <title>S2I Image</title>
      <link>/docs/enterprise_features/s2i/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/enterprise_features/s2i/</guid>
      <description>S2I Image Sakuli enterprise comes with ready-to-use source to image (S2I)containers for RedHat OpenShift. Using this builder container, it is easily possible to create deployable Sakuli images shipped with a test suite straight from your code repository.
Setup To setup the source to image builds on your OpenShift cluster, it is required to import the images from taconsol/sakuli-s2i. To achieve this, you have to create a docker-registry secret with your &amp;lt;docker-username&amp;gt; and &amp;lt;docker-password&amp;gt; and link it to your builder service account to authenticate on docker.</description>
    </item>
    
    <item>
      <title>Native applications</title>
      <link>/docs/writing_tests/application/</link>
      <pubDate>Thu, 12 Sep 2019 13:18:58 +0200</pubDate>
      
      <guid>/docs/writing_tests/application/</guid>
      <description>Interacting with a native application Now that we have covered how to interact with an operating system and used screenshot based testing capabilities of Sakuli, we can move on how to utilize one or multiple applications. All features are incorporated in the ThenableApplication Interface.
Open an application To open an application, you enter the path to the application or respectively the application name, if you already added it to your PATH environment variable.</description>
    </item>
    
    <item>
      <title>Webtests</title>
      <link>/docs/writing_tests/webtests/</link>
      <pubDate>Thu, 12 Sep 2019 13:16:37 +0200</pubDate>
      
      <guid>/docs/writing_tests/webtests/</guid>
      <description>Web tests For DOM based testing most of the functions from Sahi testscan be used (please note that Sakuli only implements the open source APIs).
The main difference between Sakuli v1 and Sakuli v2 is the usage of Promisesin the action API, meaning that you have to await a click for example.
On the other hand, element selectors remain synchronized functions but will not do the actual DOM fetching anymore. While an expression like var $e=_link(&#39;Sakuli&#39;) did an actual DOM-access in Sakuli v1.</description>
    </item>
    
    <item>
      <title>Tutorial</title>
      <link>/docs/writing_tests/tutorial/</link>
      <pubDate>Thu, 12 Sep 2019 13:16:37 +0200</pubDate>
      
      <guid>/docs/writing_tests/tutorial/</guid>
      <description>Tutorial This tutorial shows how to set up a Sakuli test using the CLI and how to use a combination of the native and DOM-based features of Sakuli.
Setting up a Sakuli Test Suite Sakuli will bootstrap a test suite with the following command. A detailed explanation on what files are needed, can be found in anatomy chapter. npx @sakuli/cli create project . --package npm i
Typescript This step is optional but we recommend using typescript.</description>
    </item>
    
  </channel>
</rss>