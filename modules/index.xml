<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modules on </title>
    <link>/docs/modules/</link>
    <description>Recent content in Modules on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 12 Sep 2019 14:16:46 +0200</lastBuildDate>
    
	<atom:link href="/docs/modules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Icinga2 Forwarder</title>
      <link>/docs/modules/icinga/</link>
      <pubDate>Thu, 12 Sep 2019 14:15:55 +0200</pubDate>
      
      <guid>/docs/modules/icinga/</guid>
      <description>Icinga2 Forwarder npm i @sakuli/forwarder-icinga2 Enable the Icinga2 API All steps required to enable the Icinga2 API are described in the REST API documentation.
Create a Icinga2 service Create a check_command which will only be executed if Icinga2 did not receive a Sakuli result within a certain time. This ensures that you get a notification even if no passive check result reaches Icinga2 at all:
/etc/icinga2/conf.d/commands.conf object CheckCommand &amp;#34;check_dummy&amp;#34; { import &amp;#34;plugin-check-command&amp;#34; command = [ PluginDir + &amp;#34;/check_dummy&amp;#34;,&amp;#34;$dummy_state$&amp;#34;,&amp;#34;$dummy_text$&amp;#34; ] vars.</description>
    </item>
    
    <item>
      <title>Prometheus Fowarder</title>
      <link>/docs/modules/prometheus/</link>
      <pubDate>Tue, 10 Mar 2020 17:26:00 +0200</pubDate>
      
      <guid>/docs/modules/prometheus/</guid>
      <description>Prometheus Forwarder Available from version 2.3.0
Add the forwarder manually as follows:
npm i @sakuli/forwarder-prometheus Push gateway It is assumed that a push gateway is available in your monitoring setup. As Sakuli checks are not constantly available like e.g. a Webservice, it is required to use a Prometheus push gateway to provide a scraping endpoint for Prometheus to obtain measurements gathered by Sakuli.
Forwarder configuration Configuration is located in sakuli.properties within the root folder of your project or respectively in testsuite.</description>
    </item>
    
    <item>
      <title>checkmk Fowarder</title>
      <link>/docs/modules/check/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:04 +0200</pubDate>
      
      <guid>/docs/modules/check/</guid>
      <description>checkmk Forwarder Add the forwarder to your project with:
npm i @sakuli/forwarder-checkmk Sakuli Client Configuration It is assumed that the client is already monitored by checkmk and that an agent is installed and running on it.
Spool folder Create a new folder spool in the installation path of the checkmk agent. This is the folder where the results will be written and stored into. Don&amp;rsquo;t forget to grant writing permissions for the folder to the user running Sakuli checks.</description>
    </item>
    
    <item>
      <title>OMD Forwarder</title>
      <link>/docs/modules/omd/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/modules/omd/</guid>
      <description>OMD / Gearman Forwarder npm i @sakuli/forwarder-gearman Configure OMD Sakuli transmits performance data to a Gearman result queue rather than to OMD directly. For that we require a gearman-enabled monitoring system in an OMD environment.
It takes a few steps to set up the monitoring system in order to process Sakuli&amp;rsquo;s performance data correctly.
Enable and configure mod-gearman Use the Makefile located in OMD_ROOT/share/sakuli/omd/ to configure mod-gearman:
 Enable all services for mod-gearman Set the bind IP and port (default: 0.</description>
    </item>
    
    <item>
      <title>Container</title>
      <link>/docs/modules/container/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/modules/container/</guid>
      <description>Pre-configured Container This image is ready to go and ships with already installed:
 Sakuli Icinga2 / checkmk / OMD / Prometheus Forwarder VNC / noVNC Chrome / Firefox (incl. webdriver)  1 Obtaining the Image docker pull taconsol/sakuli:&amp;lt;IMAGE_TAG&amp;gt; Tech previews of Sakuli containers are published as latest. We highly recommend specifying the exact version of Sakuli for productive tests/checks.
Containers are tagged according to Sakuli versions, so in order to use Sakuli v2.</description>
    </item>
    
    <item>
      <title>S2I Image</title>
      <link>/docs/modules/s2i/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/modules/s2i/</guid>
      <description>S2I Image Sakuli comes with ready-to-use source to image (S2I) containers for RedHat OpenShift. Using this builder container, it is easily possible to create deployable Sakuli images shipped with a test suite straight from your code repository.
Setup To setup the source to image builds on your OpenShift cluster, it is required to import the images from taconsol/sakuli-s2i.
oc import-image sakuli-s2i \  --from=docker.io/taconsol/sakuli-s2i \  --confirm \  --scheduled=true \  --all=true  Note: The oc import-image statement is configured to not only import all available Sakuli S2I images but also to check for updates automatically.</description>
    </item>
    
    <item>
      <title>Sakuli Dashboard</title>
      <link>/docs/modules/sakuli-dashboard-deployment/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:46 +0200</pubDate>
      
      <guid>/docs/modules/sakuli-dashboard-deployment/</guid>
      <description>Sakuli Dashboard The Sakuli Dashboard streamlines your e2e application monitoring with Sakuli. It helps you start your Sakuli test automatically with a cronjob to monitor your application continuously or trigger it manually with a button. While watching a live video feed of your Sakuli check, you can track the monitoring metrics of your application by embedding your monitoring graphs into the Sakuli Dashboard.
How to get the Sakuli Dashboard Sakuli Dashboard releases are versioned following the semantic versioning scheme.</description>
    </item>
    
    <item>
      <title>Sakuli Dashboard Configuration</title>
      <link>/docs/modules/sakuli-dashboard-configuration/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:46 +0200</pubDate>
      
      <guid>/docs/modules/sakuli-dashboard-configuration/</guid>
      <description>Sakuli Dashboard Configuration This section contains information on how to configure the Sakuli dashboard.
The Sakuli dashboard is configurable via environmental variables containing JSON documents. Check out the different sections to get example templates and detailed information about how to set up your Sakuli dashboard.
   Environment variable Description     DASHBOARD_CONFIG Configures the displays (ordering, url, action buttons, etc.) shown in the dashboard   ACTION_CONFIG (optional) Available actions to perform on the cluster and corresponding display updates   CLUSTER_CONFIG (optional) Configures the cluster access (cluster address, access token, etc.</description>
    </item>
    
    <item>
      <title>Optical character recognition (OCR)</title>
      <link>/docs/modules/ocr/</link>
      <pubDate>Fri, 18 Dec 2020 13:55:46 +0100</pubDate>
      
      <guid>/docs/modules/ocr/</guid>
      <description>Optical character recognition (OCR) (Available from v2.5.0)
With optical character recognition (OCR) it is possible to convert screen content into text. In combination with Sakuli, it is also possible to automate software based on the text shown on screen.
OCR in containers Sakuli containers ship with a complete setup to use the OCR module of Sakuli. OCR module can be used without any further set up.
Installing Sakuli OCR Installing the OCR module of Sakuli on a workstation or virtual machine is possible, but requires some additional steps and dependencies.</description>
    </item>
    
  </channel>
</rss>