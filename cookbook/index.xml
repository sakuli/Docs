<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cookbook on </title>
    <link>/docs/cookbook/</link>
    <description>Recent content in Cookbook on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Dec 2019 12:39:00 +0100</lastBuildDate>
    
	<atom:link href="/docs/cookbook/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tabs</title>
      <link>/docs/cookbook/tabs/</link>
      <pubDate>Mon, 20 Jul 2020 12:41:40 +0100</pubDate>
      
      <guid>/docs/cookbook/tabs/</guid>
      <description>How can I handle tabs in Sakuli? Switch focus to another tab The simplest way to switch the tab is based on the position of the tab. This snippet, for example, will switch to the second tab of the browser. let handles = await driver.getAllWindowHandles(); await driver.switchTo().window(handles[1]); 
To switch back to the first tab, we can use: await driver.switchTo().window(handles[0]); 
Closing a tab You can close the currently focused tab with: await driver.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/docs/cookbook/logging/</link>
      <pubDate>Thu, 23 Apr 2020 05:05:50 +0100</pubDate>
      
      <guid>/docs/cookbook/logging/</guid>
      <description>Logging Logging is done via the Logger object within a testcase. It provides several methods to log at the respective log level: Logger.logDebug(&amp;#34;This will be logged on debug level&amp;#34;); Logger.logInfo(&amp;#34;This will be logged on info level&amp;#34;); Logger.logWarning(&amp;#34;This will be logged on warning level&amp;#34;); Logger.logError(&amp;#34;This will be logged on error level&amp;#34;);</description>
    </item>
    
    <item>
      <title>Handling forms</title>
      <link>/docs/cookbook/handling-forms/</link>
      <pubDate>Fri, 20 Mar 2020 13:18:11 +0100</pubDate>
      
      <guid>/docs/cookbook/handling-forms/</guid>
      <description>Handling forms Filling forms and verifying their functionality is one of the major use cases in E2E-Testing and -Monitoring. Most of the web elements have been abstracted from their technical specification in HTML. An &amp;lt;intput name=&amp;quot;last-name&amp;quot; /&amp;gt;  for example is abstracted as a _textbox(&amp;quot;last-name&amp;quot;) accessor. Let&amp;rsquo;s have a look at the most common accessors to interact with forms.
Input fields Textarea Filling text into a textarea can easily be achieved by combining the _setValue() action with the _textarea() accessor.</description>
    </item>
    
    <item>
      <title>Waiting</title>
      <link>/docs/cookbook/waiting/</link>
      <pubDate>Thu, 19 Mar 2020 12:05:50 +0100</pubDate>
      
      <guid>/docs/cookbook/waiting/</guid>
      <description>Waiting In some cases, it might be required to wait for an animation to finish or for page to load dynamic content to use it in test cases or checks. To achieve this, Sakuli provides various options to wait a certain time or for a specified condition until test execution continues.
Static wait // wait for three seconds await _wait(3000);  Wait for an element to be visible // wait for three seconds until the DIV &amp;#34;MyDiv&amp;#34; is visible await _wait(3000, () =&amp;gt; _isVisible(_div(&amp;#34;MyDiv&amp;#34;)));  Wait for any condition to be met It is possible to pass a boolean function (function returning true or false) as a second optional parameter of the _wait() action.</description>
    </item>
    
    <item>
      <title>Error: Invalid session id</title>
      <link>/docs/cookbook/invalid-session-id/</link>
      <pubDate>Mon, 03 Feb 2020 15:25:42 +0100</pubDate>
      
      <guid>/docs/cookbook/invalid-session-id/</guid>
      <description>Oh noes! Sakuli crashed with an &amp;ldquo;Invalid session id&amp;rdquo; error! When Sakuli crashes with an &amp;ldquo;Invalid session id&amp;rdquo; error, the webdriver itself crashed or least closed the session the Sakuli test or check is using. Such a behavior mostly occurs, when the provided resources for the Sakuli execution are insufficient. When testing bigger websites, please check if enough SHM space is available.
 Running Sakuli container with &amp;ndash;shm-size Increasing shared memory on openshift  </description>
    </item>
    
    <item>
      <title>Run Container</title>
      <link>/docs/cookbook/container/</link>
      <pubDate>Mon, 16 Dec 2019 18:57:44 +0100</pubDate>
      
      <guid>/docs/cookbook/container/</guid>
      <description>How to run a Container with Sakuli Tests  Sakuli Container are only available with an active Sakuli subscription.
 The following how-to aims to help unexperienced users getting started with Sakuli Containers. A Sakuli Container ships with pre-installed Sakuli, Monitoring forwarder and other additional modules, it is not necessary to install anything on your docker-host, except for docker.
Download the image You first need to download the Sakuli image: docker pull taconsol/sakuli:2.</description>
    </item>
    
    <item>
      <title>Container and Proxies</title>
      <link>/docs/cookbook/proxy/</link>
      <pubDate>Mon, 16 Dec 2019 11:50:07 +0100</pubDate>
      
      <guid>/docs/cookbook/proxy/</guid>
      <description>Container behind Proxies To configure a proxy within your docker container, set one or both of the following environment variables within your docker run command.
-e HTTP_PROXY=http://server-ip:port/ -e HTTPS_PROXY=http(s)://server-ip:port/  Use a HTTP_PROXY for http target sites and HTTPS_PROXY for https sites, if you switch between secure and insecure sites or just to be sure not to worry about it, you can also define both proxies at the same time, e.</description>
    </item>
    
    <item>
      <title>Frames</title>
      <link>/docs/cookbook/frames/</link>
      <pubDate>Fri, 13 Dec 2019 12:41:40 +0100</pubDate>
      
      <guid>/docs/cookbook/frames/</guid>
      <description>How can I handle frames or iframes in Sakuli? Since v2.2.0 Sakuli will automatically detect different frames (and iframes) and will search for elements in each frame when the element can not be found in default frame. But it is also possible to switch between frames manually by using the iframe webelement or its respective index.
const myIframe = await _fetch(_iframe(&amp;#39;frameName&amp;#39;)); await driver.switchTo().frame(myIframe);  const frameIndex = 0; await driver.switchTo().frame(frameIndex);  Please note: Depending on the size and number of used inline frames, an automated search might limit the performance of the check or test case.</description>
    </item>
    
  </channel>
</rss>