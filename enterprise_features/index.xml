<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Enterprise Features on </title>
    <link>/docs/enterprise_features/</link>
    <description>Recent content in Enterprise Features on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 12 Sep 2019 14:16:46 +0200</lastBuildDate>
    
	<atom:link href="/docs/enterprise_features/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Icinga2 Forwarder</title>
      <link>/docs/enterprise_features/icinga/</link>
      <pubDate>Thu, 12 Sep 2019 14:15:55 +0200</pubDate>
      
      <guid>/docs/enterprise_features/icinga/</guid>
      <description>Icinga2 Forwarder Add the forwarder using the assistant or configure it manually:
npm i @sakuli/forwarder-icinga2 Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.
Enable the Icinga2 API All steps required to enable the Icinga2 API are described in the REST API documentation.
Create a Icinga2 service Create a check_command which will only be executed if Icinga2 did not receive a Sakuli result within a certain time.</description>
    </item>
    
    <item>
      <title>Prometheus Fowarder</title>
      <link>/docs/enterprise_features/prometheus/</link>
      <pubDate>Tue, 10 Mar 2020 17:26:00 +0200</pubDate>
      
      <guid>/docs/enterprise_features/prometheus/</guid>
      <description>Prometheus Forwarder Available from version 2.3.0
Add the forwarder manually as follows:
npm i @sakuli/forwarder-prometheus Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.
Push gateway It is assumed that a push gateway is available in your monitoring setup. As Sakuli checks are not constantly available like e.g. a Webservice, it is required to use a Prometheus push gateway to provide a scraping endpoint for Prometheus to obtain measurements gathered by Sakuli.</description>
    </item>
    
    <item>
      <title>checkmk Fowarder</title>
      <link>/docs/enterprise_features/check/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:04 +0200</pubDate>
      
      <guid>/docs/enterprise_features/check/</guid>
      <description>checkmk Forwarder Add the forwarder using the assistant or configure it manually:
Add the forwarder to your project with:
npm i @sakuli/forwarder-checkmk Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.
Sakuli Client Configuration It is assumed that the client is already monitored by checkmk and that an agent is installed and running on it.
Spool folder Create a new folder spool in the installation path of the checkmk agent.</description>
    </item>
    
    <item>
      <title>OMD Forwarder</title>
      <link>/docs/enterprise_features/omd/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/enterprise_features/omd/</guid>
      <description>OMD / Gearman Forwarder Add the forwarder using the assistant or configure it manually:
npm i @sakuli/forwarder-gearman Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.
Configure OMD Sakuli transmits performance data to a Gearman result queue rather than to OMD directly. For that we require a gearman-enabled monitoring system in an OMD environment.
It takes a few steps to set up the monitoring system in order to process Sakuli&amp;rsquo;s performance data correctly.</description>
    </item>
    
    <item>
      <title>Container</title>
      <link>/docs/enterprise_features/container/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/enterprise_features/container/</guid>
      <description>Pre-configured Container Once you obtained a Sakuli Enterprise license your docker-user will be granted access to the private Sakuli test container image. This image is ready to go and ships with already installed:
 Sakuli Icinga2 / checkmk / OMD / Prometheus Forwarder VNC / noVNC Chrome / Firefox (incl. webdriver)  1 Obtaining the Image The registered docker-hub user will then be able to pull the private image:
docker pull taconsol/sakuli:&amp;lt;IMAGE_TAG&amp;gt; Tech previews of Sakuli containers are published as latest.</description>
    </item>
    
    <item>
      <title>S2I Image</title>
      <link>/docs/enterprise_features/s2i/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/enterprise_features/s2i/</guid>
      <description>S2I Image Sakuli enterprise comes with ready-to-use source to image (S2I)containers for RedHat OpenShift. Using this builder container, it is easily possible to create deployable Sakuli images shipped with a test suite straight from your code repository.
Setup To setup the source to image builds on your OpenShift cluster, it is required to import the images from taconsol/sakuli-s2i. To achieve this, you have to create a docker-registry secret with your &amp;lt;docker-username&amp;gt; and &amp;lt;docker-password&amp;gt; and link it to your builder service account to authenticate on docker.</description>
    </item>
    
    <item>
      <title>Sakuli Dashboard</title>
      <link>/docs/enterprise_features/sakuli-dashboard-deployment/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:46 +0200</pubDate>
      
      <guid>/docs/enterprise_features/sakuli-dashboard-deployment/</guid>
      <description>Sakuli Dashboard The Sakuli Dashboard streamlines your e2e application monitoring with Sakuli. It helps you start your Sakuli test automatically with a cronjob to monitor your application continuously or trigger it manually with a button. While watching a live video feed of your Sakuli check, you can track the monitoring metrics of your application by embedding your monitoring graphs into the Sakuli Dashboard.
How to get the Sakuli Dashboard Attention: Only Sakuli Enterprise users will be eligible to access the private Sakuli Dashboard Docker images.</description>
    </item>
    
    <item>
      <title>Sakuli Dashboard Configuration</title>
      <link>/docs/enterprise_features/sakuli-dashboard-configuration/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:46 +0200</pubDate>
      
      <guid>/docs/enterprise_features/sakuli-dashboard-configuration/</guid>
      <description>Sakuli Dashboard Configuration This section contains information on how to configure the Sakuli dashboard.
The Sakuli dashboard is configurable via environmental variables containing JSON documents. Check out the different sections to get example templates and detailed information about how to set up your Sakuli dashboard.
   Environment variable Description     DASHBOARD_CONFIG Configures the displays (ordering, url, action buttons, etc.) shown in the dashboard   ACTION_CONFIG (optional) Available actions to perform on the cluster and corresponding display updates   CLUSTER_CONFIG (optional) Configures the cluster access (cluster address, access token, etc.</description>
    </item>
    
  </channel>
</rss>