<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Enterprise Features on </title>
    <link>/docs/enterprise_features/</link>
    <description>Recent content in Enterprise Features on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 12 Sep 2019 14:16:46 +0200</lastBuildDate>
    
	<atom:link href="/docs/enterprise_features/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Icinga2 Forwarder</title>
      <link>/docs/enterprise_features/icinga/</link>
      <pubDate>Thu, 12 Sep 2019 14:15:55 +0200</pubDate>
      
      <guid>/docs/enterprise_features/icinga/</guid>
      <description>Icinga2 Forwarder Add the forwarder using the assistant or configure it manually:
npm i @sakuli/forwarder-icinga2 To register the forwarder into your project you have to edit the package.json file and add the preset to the Sakuli configuration key (with our tech preview this is no longer necessary):
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-icinga2&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.</description>
    </item>
    
    <item>
      <title>Prometheus Fowarder</title>
      <link>/docs/enterprise_features/prometheus/</link>
      <pubDate>Tue, 10 Mar 2020 17:26:00 +0200</pubDate>
      
      <guid>/docs/enterprise_features/prometheus/</guid>
      <description>Prometheus Forwarder Available from version 2.3.0
Add the forwarder manually as follows:
npm i @sakuli/forwarder-prometheus To register the forwarder in your project, edit your package.json and add the preset to the Sakuli configuration key (with our tech preview this is no longer necessary):
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-prometheus&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information. You can find further information in the enterprise section.</description>
    </item>
    
    <item>
      <title>checkmk Fowarder</title>
      <link>/docs/enterprise_features/check/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:04 +0200</pubDate>
      
      <guid>/docs/enterprise_features/check/</guid>
      <description>checkmk Forwarder Add the forwarder using the assistant or configure it manually:
Add the forwarder to your project with:
npm i @sakuli/forwarder-checkmk To register the forwarder into your project you have to edit the package.json file and add the preset to the Sakuli configuration key (with our tech preview this is no longer necessary):
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-checkmk&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information.</description>
    </item>
    
    <item>
      <title>OMD Forwarder</title>
      <link>/docs/enterprise_features/omd/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/enterprise_features/omd/</guid>
      <description>OMD / Gearman Forwarder Add the forwarder using the assistant or configure it manually:
npm i @sakuli/forwarder-gearman To register the forwarder into your project you have to edit the package.json file and add the preset to the Sakuli configuration key (with our tech preview this is no longer necessary):
{ &amp;#34;sakuli&amp;#34;: { &amp;#34;presetProvider&amp;#34;: [ &amp;#34;@sakuli/legacy&amp;#34;, &amp;#34;@sakuli/forwarder-gearman&amp;#34; ] } } Installation of any enterprise feature requires a proper setup of your license information.</description>
    </item>
    
    <item>
      <title>Container</title>
      <link>/docs/enterprise_features/e2e/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/enterprise_features/e2e/</guid>
      <description>Pre-configured Container Once you obtained a Sakuli Enterprise license your docker-user will be granted access to the private Sakuli test container image. This image is ready to go and ships with already installed:
 Sakuli Icinga2 / checkmk / OMD / Prometheus Forwarder VNC / noVNC Chrome / Firefox (incl. webdriver)  1 Obtaining the Image The registered docker-hub user will then be able to pull the private image:
docker pull taconsol/sakuli:&amp;lt;IMAGE_TAG&amp;gt; Sakuli test containers do not provide a latest tag.</description>
    </item>
    
    <item>
      <title>S2I Image</title>
      <link>/docs/enterprise_features/s2i/</link>
      <pubDate>Thu, 12 Sep 2019 14:16:13 +0200</pubDate>
      
      <guid>/docs/enterprise_features/s2i/</guid>
      <description>S2I Image Sakuli enterprise comes with ready-to-use source to image (S2I)containers for RedHat OpenShift. Using this builder container, it is easily possible to create deployable Sakuli images shipped with a test suite straight from your code repository.
Setup To setup the source to image builds on your OpenShift cluster, it is required to import the images from taconsol/sakuli-s2i. To achieve this, you have to create a docker-registry secret with your &amp;lt;docker-username&amp;gt; and &amp;lt;docker-password&amp;gt; and link it to your builder service account to authenticate on docker.</description>
    </item>
    
  </channel>
</rss>